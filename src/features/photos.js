import { Input } from "telegraf";

function ensurePics(state, chatId) {
  const cur = state.pics.get(chatId);
  if (cur) {
    if (!cur.docImageIds) cur.docImageIds = [];
    if (!cur.photoIds) cur.photoIds = cur.fileIds || [];
    if (!cur.urls) cur.urls = [];
    return cur;
  }
  const seeded = {
    photoIds: [],
    docImageIds: [],
    urls: [
      "https://i.imgur.com/Hm1ZJzC.jpeg",
      "https://i.imgur.com/6rQ7F1Q.jpeg",
      "https://i.imgur.com/O2mQq4M.jpeg",
    ],
  };
  state.pics.set(chatId, seeded);
  return seeded;
}

export function registerPhotos(bot, { state, utils }) {
  bot.command("addchipic", async (ctx) => {
    const reply = ctx.message?.reply_to_message;
    if (!reply)
      return ctx.reply(
        "H√£y **reply** v√†o m·ªôt b·ª©c ·∫£nh (photo ho·∫∑c file image) ƒë·ªÉ th√™m.",
        { parse_mode: "Markdown" }
      );
    if (!utils.isPhotoLike(reply))
      return ctx.reply(
        "Tin nh·∫Øn ƒë∆∞·ª£c reply kh√¥ng ph·∫£i ·∫£nh. G·ª≠i ·∫£nh ho·∫∑c file ·∫£nh r·ªìi reply /addchipic nha."
      );

    const store = ensurePics(state, ctx.chat.id);
    if (reply.photo && reply.photo.length > 0) {
      const best = reply.photo[reply.photo.length - 1];
      if (!store.photoIds.includes(best.file_id))
        store.photoIds.push(best.file_id);
    } else if (
      reply.document &&
      reply.document.mime_type?.startsWith("image/")
    ) {
      if (!store.docImageIds.includes(reply.document.file_id))
        store.docImageIds.push(reply.document.file_id);
    }
    state.pics.set(ctx.chat.id, store);

    const total =
      store.photoIds.length + store.docImageIds.length + store.urls.length;
    return ctx.reply(`ƒê√£ th√™m 1 ·∫£nh. T·ªïng: ${total}`);
  });

  bot.command("listchipic", (ctx) => {
    const store = ensurePics(state, ctx.chat.id);
    const total =
      store.photoIds.length + store.docImageIds.length + store.urls.length;
    ctx.reply(
      [
        `Kho ·∫£nh k·ª∑ ni·ªám: ${total} t·∫•m`,
        `‚Ä¢ photo: ${store.photoIds.length}`,
        `‚Ä¢ file image: ${store.docImageIds.length}`,
        `‚Ä¢ url: ${store.urls.length}`,
        total > 0
          ? "D√πng /chipic [n] ƒë·ªÉ g·ª≠i, /delchipic [index] ƒë·ªÉ xo√°."
          : "D√πng /addchipic (reply ·∫£nh) ƒë·ªÉ th√™m nha.",
      ].join("\n")
    );
  });

  bot.command("delchipic", (ctx) => {
    const arg = utils.getArgs(ctx, "delchipic");
    const idx = parseInt(arg, 10);
    if (isNaN(idx) || idx < 1)
      return ctx.reply("D√πng: /delchipic [index], v√≠ d·ª•: /delchipic 3");

    const store = ensurePics(state, ctx.chat.id);
    const flat = [
      ...store.photoIds.map((v) => ({ t: "p", v })),
      ...store.docImageIds.map((v) => ({ t: "d", v })),
      ...store.urls.map((v) => ({ t: "u", v })),
    ];
    if (idx > flat.length) return ctx.reply(`Ch·ªâ c√≥ ${flat.length} ·∫£nh.`);
    const { t, v } = flat[idx - 1];

    if (t === "p") store.photoIds = store.photoIds.filter((x) => x !== v);
    else if (t === "d")
      store.docImageIds = store.docImageIds.filter((x) => x !== v);
    else store.urls = store.urls.filter((x) => x !== v);

    state.pics.set(ctx.chat.id, store);
    ctx.reply(`ƒê√£ xo√° ·∫£nh ·ªü v·ªã tr√≠ ${idx}.`);
  });

  bot.command("chipic", async (ctx) => {
    const n = utils.getNick(state, ctx.chat.id);
    const args = utils.getArgs(ctx, "chipic");
    let count = parseInt(args, 10);
    if (isNaN(count) || count < 1) count = 1;
    if (count > 10) count = 10;

    const store = ensurePics(state, ctx.chat.id);
    const stock = [
      ...store.photoIds.map((x) => ({ type: "photo", value: x })),
      ...store.docImageIds.map((x) => ({ type: "doc", value: x })),
      ...store.urls.map((x) => ({ type: "url", value: x })),
    ];
    if (stock.length === 0)
      return ctx.reply("Kho ·∫£nh ch∆∞a c√≥ g√¨. D√πng /addchipic ƒë·ªÉ th√™m nha.");

    const captions = [
      `Kho·∫£nh kh·∫Øc y√™u c·ªßa ${n} ƒë√¢y n√® üì∏`,
      `·∫¢nh k·ª∑ ni·ªám ƒë·∫πp nh∆∞ ${n} v·∫≠y üíû`,
      `Nh√¨n ·∫£nh l√† th·∫•y h·∫°nh ph√∫c r·ªìi ${n} ∆°i ‚ú®`,
    ];
    const caption = utils.bagPick(state, ctx, "chipic_captions", captions);

    const sendOne = async (it, withCaption = false) => {
      try {
        if (it.type === "photo")
          return await ctx.replyWithPhoto(it.value, {
            caption: withCaption ? caption : undefined,
          });
        if (it.type === "doc")
          return await ctx.replyWithDocument(it.value, {
            caption: withCaption ? caption : undefined,
          });
        return await ctx.replyWithPhoto(Input.fromURL(it.value), {
          caption: withCaption ? caption : undefined,
        });
      } catch (e) {
        console.error("sendOne error:", e.message);
        return ctx.reply("G·ª≠i ·∫£nh l·ªói nh·∫π, th·ª≠ t·∫•m kh√°c nha.");
      }
    };

    if (count === 1) {
      const one =
        stock[utils.bagNext(state, ctx.chat.id, "chipic_stock", stock.length)];
      return sendOne(one, true);
    }
    for (let i = 0; i < count; i++) {
      const one =
        stock[utils.bagNext(state, ctx.chat.id, "chipic_stock", stock.length)];
      await sendOne(one, i === 0);
    }
  });
}
